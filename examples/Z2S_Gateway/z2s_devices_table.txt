int16_t channel_number_slot = Z2S_findChannelNumberSlot(ieee_addr, endpoint, cluster, SUPLA_CHANNELTYPE_HVAC, NO_CUSTOM_CMD_SID);
  if (channel_number_slot >= 0) {
    switch (z2s_devices_table[channel_number_slot].model_id) {
      case Z2S_DEVICE_DESC_TUYA_HVAC_6567C: {
        Tuya_read_dp_result_t Tuya_read_dp_result;
        Tuya_read_dp_result = Z2S_readTuyaDPvalue(TUYA_6567C_CURRENT_HEATING_SETPOINT_DP, payload_size, payload);
        if (Tuya_read_dp_result.is_success)
          log_i("TUYA_6567C_CURRENT_HEATING_SETPOINT_DP value = %d",Tuya_read_dp_result.dp_value);
        Tuya_read_dp_result = Z2S_readTuyaDPvalue(TUYA_6567C_LOCAL_TEMPERATURE_DP, payload_size, payload);
        if (Tuya_read_dp_result.is_success)
          log_i("TUYA_6567C_LOCAL_TEMPERATURE_DP value = %d",Tuya_read_dp_result.dp_value);
        Tuya_read_dp_result = Z2S_readTuyaDPvalue(TUYA_6567C_SYSTEM_MODE_DP, payload_size, payload);
        if (Tuya_read_dp_result.is_success)
          log_i("TUYA_6567C_SYSTEM_MODE_DP value = %d",Tuya_read_dp_result.dp_value);
        Tuya_read_dp_result = Z2S_readTuyaDPvalue(TUYA_6567C_RUNNING_STATE_DP, payload_size, payload);
        if (Tuya_read_dp_result.is_success)
          log_i("TUYA_6567C_RUNNING_STATE_DP value = %d",Tuya_read_dp_result.dp_value);
        Tuya_read_dp_result = Z2S_readTuyaDPvalue(TUYA_6567C_CHILD_LOCK_DP, payload_size, payload);
        if (Tuya_read_dp_result.is_success)
          log_i("TUYA_6567C_CHILD_LOCK_DP value = %d",Tuya_read_dp_result.dp_value);
        Tuya_read_dp_result = Z2S_readTuyaDPvalue(TUYA_6567C_AWAY_MODE_DP, payload_size, payload);
        if (Tuya_read_dp_result.is_success)
          log_i("TUYA_6567C_AWAY_MODE_DP value = %d",Tuya_read_dp_result.dp_value);
        Tuya_read_dp_result = Z2S_readTuyaDPvalue(TUYA_6567C_SCHEDULE_ENABLE_DP, payload_size, payload);
        if (Tuya_read_dp_result.is_success)
          log_i("TUYA_6567C_SCHEDULE_ENABLE_DP value = %d",Tuya_read_dp_result.dp_value);
        Tuya_read_dp_result = Z2S_readTuyaDPvalue(TUYA_6567C_SCHEDULE_SET_DP, payload_size, payload);
        if (Tuya_read_dp_result.is_success)
          log_i("TUYA_6567C_SCHEDULE_SET_DP value = %d",Tuya_read_dp_result.dp_value);
      }
    }
    //msgZ2SDeviceTuyaHvac(z2s_devices_table[channel_number_slot].Supla_channel, cluster, command_id, payload_size, payload, rssi);
    return;
  }
  channel_number_slot = Z2S_findChannelNumberSlot(ieee_addr, endpoint, cluster, SUPLA_CHANNELTYPE_DIMMER, NO_CUSTOM_CMD_SID);
  if (channel_number_slot >= 0) {
    switch (z2s_devices_table[channel_number_slot].model_id) {
      case Z2S_DEVICE_DESC_TUYA_DIMMER_DOUBLE_SWITCH: {
        int8_t sub_id = ((*(payload + 2)) < 7) ? 1 : 2; 
        channel_number_slot = Z2S_findChannelNumberSlot(ieee_addr, endpoint, cluster, 
                                                        SUPLA_CHANNELTYPE_DIMMER, sub_id);
        if (channel_number_slot < 0)
          log_i("No Tuya double dimmer device channel found for address %s", ieee_addr);
       else msgZ2SDeviceDimmer(z2s_devices_table[channel_number_slot].model_id, z2s_devices_table[channel_number_slot].Supla_channel, 
                           cluster, command_id, payload_size, payload, rssi); 
      } break;
      default: 
        msgZ2SDeviceDimmer(z2s_devices_table[channel_number_slot].model_id, z2s_devices_table[channel_number_slot].Supla_channel, 
                           cluster, command_id, payload_size, payload, rssi); break;
    }
    return;
  }
  channel_number_slot = Z2S_findChannelNumberSlot(ieee_addr, endpoint, cluster, SUPLA_CHANNELTYPE_HUMIDITYANDTEMPSENSOR, NO_CUSTOM_CMD_SID);
  if (channel_number_slot >= 0) {
    switch (z2s_devices_table[channel_number_slot].model_id) {
      case Z2S_DEVICE_DESC_TUYA_SOIL_TEMPHUMIDITY_SENSOR: {
        if (command_id == 2) { 
          auto element = Supla::Element::getElementByChannelNumber(z2s_devices_table[channel_number_slot].Supla_channel);
          if (element != nullptr && element->getChannel()->getChannelType() == SUPLA_CHANNELTYPE_HUMIDITYANDTEMPSENSOR) {
            auto Supla_VirtualThermHygroMeter = reinterpret_cast<Supla::Sensor::VirtualThermHygroMeter *>(element);
            Tuya_read_dp_result_t Tuya_read_dp_result;
            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x05/*temperature*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success)
              Supla_VirtualThermHygroMeter->setTemp((float)Tuya_read_dp_result.dp_value/10);  
            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x03/*soil moisture*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success)
              Supla_VirtualThermHygroMeter->setHumi(Tuya_read_dp_result.dp_value);
            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x0F/*battery level*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success) { 
              log_i("Battery level 0x0F is %d", Tuya_read_dp_result.dp_value);
              Supla_VirtualThermHygroMeter->getChannel()->setBatteryLevel(Tuya_read_dp_result.dp_value);
            }
            /*Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x0E, payload_size, payload); //battery_state
            if (Tuya_read_dp_result.is_success) {
              log_i("Battery state 0x0E is %d, level %d", Tuya_read_dp_result.dp_value * 50);
              Supla_VirtualThermHygroMeter->getChannel()->setBatteryLevel(Tuya_read_dp_result.dp_value * 50);
            Supla_VirtualThermHygroMeter->getChannel()->setBridgeSignalStrength(Supla::rssiToSignalStrength(rssi));
            }*/
          }
        }          
      } break;
      case Z2S_DEVICE_DESC_TUYA_TEMPHUMIDITY_SENSOR: {
        if (command_id == 2) { 
          auto element = Supla::Element::getElementByChannelNumber(z2s_devices_table[channel_number_slot].Supla_channel);
          if (element != nullptr && element->getChannel()->getChannelType() == SUPLA_CHANNELTYPE_HUMIDITYANDTEMPSENSOR) {
            auto Supla_VirtualThermHygroMeter = reinterpret_cast<Supla::Sensor::VirtualThermHygroMeter *>(element);
            Tuya_read_dp_result_t Tuya_read_dp_result;
            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x01/*temperature*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success)
              Supla_VirtualThermHygroMeter->setTemp((float)Tuya_read_dp_result.dp_value/10);  
            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x02/*humidity*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success)
              Supla_VirtualThermHygroMeter->setHumi(Tuya_read_dp_result.dp_value);
            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x04/*battery level*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success) { 
              log_i("Battery level 0x04 is %d", Tuya_read_dp_result.dp_value);
              Supla_VirtualThermHygroMeter->getChannel()->setBatteryLevel(Tuya_read_dp_result.dp_value);
            }
          }
        }          
      } break; 
    }
    return;
  }
  channel_number_slot = Z2S_findChannelNumberSlot(ieee_addr, endpoint, cluster, SUPLA_CHANNELTYPE_BINARYSENSOR, NO_CUSTOM_CMD_SID);
  if (channel_number_slot >= 0) {
    switch (z2s_devices_table[channel_number_slot].model_id) {
      case Z2S_DEVICE_DESC_TUYA_SMOKE_DETECTOR: {
        if (command_id == 2) {
          auto element = Supla::Element::getElementByChannelNumber(z2s_devices_table[channel_number_slot].Supla_channel);
          if (element != nullptr && element->getChannel()->getChannelType() == SUPLA_CHANNELTYPE_BINARYSENSOR) {
            
            auto Supla_VirtualBinary = reinterpret_cast<Supla::Sensor::VirtualBinary *>(element);
            Tuya_read_dp_result_t Tuya_read_dp_result;
            
            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x01/*smoke detected*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success)
              Tuya_read_dp_result.dp_value == 1 ? Supla_VirtualBinary->set() : Supla_VirtualBinary->clear();

            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x0F/*battery level*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success) { 
              log_i("Battery level 0x0F is %d", Tuya_read_dp_result.dp_value);
              Supla_VirtualBinary->getChannel()->setBatteryLevel(Tuya_read_dp_result.dp_value);
            }
            /*Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x0E, payload_size, payload); //battery_state
            if (Tuya_read_dp_result.is_success) {
              log_i("Battery state 0x0E is %d, level %d", Tuya_read_dp_result.dp_value, Tuya_read_dp_result.dp_value * 50);
              Supla_VirtualBinary->getChannel()->setBatteryLevel(Tuya_read_dp_result.dp_value * 50); 
            }*/
          }   
        }          
      } break;
      case Z2S_DEVICE_DESC_TUYA_PRESENCE_SENSOR: {
        if (command_id == 2) {
          auto element = Supla::Element::getElementByChannelNumber(z2s_devices_table[channel_number_slot].Supla_channel);
          if (element != nullptr && element->getChannel()->getChannelType() == SUPLA_CHANNELTYPE_BINARYSENSOR) {
            
            auto Supla_VirtualBinary = reinterpret_cast<Supla::Sensor::VirtualBinary *>(element);
            Tuya_read_dp_result_t Tuya_read_dp_result;
            
            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x01/*presence*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success)
              Tuya_read_dp_result.dp_value == 1 ? Supla_VirtualBinary->set() : Supla_VirtualBinary->clear();
          }   
        }          
      } break; 
    }
    //return;
  }
  channel_number_slot = Z2S_findChannelNumberSlot(ieee_addr, endpoint, cluster, SUPLA_CHANNELTYPE_GENERAL_PURPOSE_MEASUREMENT, NO_CUSTOM_CMD_SID);
  if (channel_number_slot >= 0) {
    switch (z2s_devices_table[channel_number_slot].model_id) {
      case Z2S_DEVICE_DESC_TUYA_SMOKE_DETECTOR: {
        if (command_id == 2) {
          
          auto element = Supla::Element::getElementByChannelNumber(z2s_devices_table[channel_number_slot].Supla_channel);
          if (element != nullptr && element->getChannel()->getChannelType() == SUPLA_CHANNELTYPE_GENERAL_PURPOSE_MEASUREMENT) {
            
            auto Supla_GeneralPurposeMeasurement = reinterpret_cast<Supla::Sensor::GeneralPurposeMeasurement *>(element);
            Tuya_read_dp_result_t Tuya_read_dp_result;
            
            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x02/*smoke concentration*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success)
              Supla_GeneralPurposeMeasurement->setValue(Tuya_read_dp_result.dp_value);
           
            Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x0F/*battery level*/, payload_size, payload);
            if (Tuya_read_dp_result.is_success) { 
              log_i("Battery level 0x0F is %d", Tuya_read_dp_result.dp_value);
              Supla_GeneralPurposeMeasurement->getChannel()->setBatteryLevel(Tuya_read_dp_result.dp_value);
            }
            /*Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x0E, payload_size, payload); //battery_state
            if (Tuya_read_dp_result.is_success) {
              log_i("Battery state 0x0E is %d, level %d", Tuya_read_dp_result.dp_value, Tuya_read_dp_result.dp_value * 50);
              Supla_GeneralPurposeMeasurement->getChannel()->setBatteryLevel(Tuya_read_dp_result.dp_value * 50);
            } */
          } 
        }          
      } break;
      case Z2S_DEVICE_DESC_TUYA_PRESENCE_SENSOR: {
        if (command_id == 2) {
          channel_number_slot = Z2S_findChannelNumberSlot(ieee_addr, endpoint, cluster, SUPLA_CHANNELTYPE_GENERAL_PURPOSE_MEASUREMENT, 0x65);
          if (channel_number_slot >= 0) {
            auto element = Supla::Element::getElementByChannelNumber(z2s_devices_table[channel_number_slot].Supla_channel);
            if (element != nullptr && element->getChannel()->getChannelType() == SUPLA_CHANNELTYPE_GENERAL_PURPOSE_MEASUREMENT) {
            
              auto Supla_GeneralPurposeMeasurement = reinterpret_cast<Supla::Sensor::GeneralPurposeMeasurement *>(element);
              Tuya_read_dp_result_t Tuya_read_dp_result;
            
              Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x65/*motion state*/, payload_size, payload);
              if (Tuya_read_dp_result.is_success)
                Supla_GeneralPurposeMeasurement->setValue(Tuya_read_dp_result.dp_value);
            } 
          }
          channel_number_slot = Z2S_findChannelNumberSlot(ieee_addr, endpoint, cluster, SUPLA_CHANNELTYPE_GENERAL_PURPOSE_MEASUREMENT, 0x6A);
          if (channel_number_slot >= 0) {
            auto element = Supla::Element::getElementByChannelNumber(z2s_devices_table[channel_number_slot].Supla_channel);
            if (element != nullptr && element->getChannel()->getChannelType() == SUPLA_CHANNELTYPE_GENERAL_PURPOSE_MEASUREMENT) {
            
              auto Supla_GeneralPurposeMeasurement = reinterpret_cast<Supla::Sensor::GeneralPurposeMeasurement *>(element);
              Tuya_read_dp_result_t Tuya_read_dp_result;
            
              Tuya_read_dp_result = Z2S_readTuyaDPvalue(0x6A/*illuminance*/, payload_size, payload);
              if (Tuya_read_dp_result.is_success)
                Supla_GeneralPurposeMeasurement->setValue(Tuya_read_dp_result.dp_value);
            } 
          }
        }          
      } break;
    }
    return;
  }
  //if (channel_number_slot < 0) 
  log_i("No channel found for address %s", ieee_addr);
  //log_i("sending custom command  %d, model id %0x%, Supla channel %d", command_id, z2s_devices_table[channel_number_slot].model_id,
  //         z2s_devices_table[channel_number_slot].Supla_channel_type)